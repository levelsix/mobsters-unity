//ALL REQUEST PROTOS SHOULD INCLUDE A MinimumUserProto AS optional that represents which client sent it/triggered it 
//DO NO START PROPERTY METHODS WITH THE WORDS NEW OR COPY

import "City.proto";
import "Structure.proto";
import "User.proto";

package com.lvl6.proto;

option java_outer_classname = "EventStructureProto";
//DO NOT USE ID AS THE NAME OF A PROPERTY IN ANY PROTO

//server will check money stuff, similar to enhancing
//client will need to check that the user can build the structure:
//meets town hall requirement, structure limit, can only build one thing
message PurchaseNormStructureRequestProto {
	optional MinimumUserProto sender = 1;
	optional CoordinateProto structCoordinates = 2;
	optional int32 structId = 3;
	optional int64 timeOfPurchase = 4;
	
	//if user needs, say, five more cash, then user can spend gems to replace
	//said five cash. (positive number, server will convert it to negative)
	optional int32 gemsSpent = 5;
	
	//positive means refund, negative means charge user (will always be negative)
	optional sint32 resourceChange = 6; 
	optional ResourceType resourceType = 7 [default = CASH];
}

message PurchaseNormStructureResponseProto {
	optional MinimumUserProto sender = 1;
	optional PurchaseNormStructureStatus status = 2;
	optional int32 userStructId = 3;
	
	enum PurchaseNormStructureStatus {
		SUCCESS = 1;
		FAIL_INSUFFICIENT_CASH = 2;
		FAIL_INSUFFICIENT_GEMS = 3;
		FAIL_INSUFFICIENT_OIL = 4;
		FAIL_OTHER = 5;
	}
}

//------------------------------------------------------------------------------------------
message MoveOrRotateNormStructureRequestProto {
	optional MinimumUserProto sender = 1;
	optional int32 userStructId = 2;
	optional MoveOrRotateNormStructType type = 3;
	optional CoordinateProto curStructCoordinates = 4;
	optional StructOrientation newOrientation = 5 [default = POSITION_1];
	
	enum MoveOrRotateNormStructType {
		MOVE = 1;
		//ROTATE = 2;
	}
}
																						//DONE
message MoveOrRotateNormStructureResponseProto {
	optional MinimumUserProto sender = 1;
	optional MoveOrRotateNormStructureStatus status = 2;
	
	enum MoveOrRotateNormStructureStatus {
		SUCCESS = 1;
		OTHER_FAIL = 2;
	}
}

//------------------------------------------------------------------------------------------
//user initiating a structure upgrade, similar to a purchase norm structure
message UpgradeNormStructureRequestProto {
	optional MinimumUserProto sender = 1;
	optional int32 userStructId = 2;
	optional int64 timeOfUpgrade = 3;	
	
	//if user needs, say, five more cash, then user can spend gems to replace
	//said five cash. (positive number, server will convert it to negative)
	optional int32 gemsSpent = 4;
	
	//positive means refund, negative means charge user (will always be negative)
	optional sint32 resourceChange = 5; 
	optional ResourceType resourceType = 6 [default = CASH];
}

																						//DONE
message UpgradeNormStructureResponseProto {	
	optional MinimumUserProto sender = 1;
	optional UpgradeNormStructureStatus status = 2;
	
	enum UpgradeNormStructureStatus {
		SUCCESS = 1;
		FAIL_NOT_ENOUGH_CASH = 2;
		FAIL_NOT_ENOUGH_GEMS = 3;
		FAIL_NOT_ENOUGH_OIL = 4;
		FAIL_NOT_BUILT_YET = 5;
		FAIL_NOT_USERS_STRUCT = 6;
		
		//client will do this, since it already knows if a user is upgrading something
		//FAIL_ANOTHER_STRUCT_STILL_UPGRADING = 7; 
		
		FAIL_AT_MAX_LEVEL_ALREADY = 8;
		FAIL_OTHER = 9;
	}
}

//------------------------------------------------------------------------------------------
					//rename to speed up norm struct 
message FinishNormStructWaittimeWithDiamondsRequestProto {
	optional MinimumUserProto sender = 1;
	optional int32 userStructId = 2;
	
	//user's userstruct's lastRetrieved will start with this date
	//if the structure is a generator, the uncollected resources will be lost when upgraded
	optional int64 timeOfSpeedup = 3;			
	
	optional int32 gemCostToSpeedup = 4;
}
																						//DONE
message FinishNormStructWaittimeWithDiamondsResponseProto {
     optional MinimumUserProto sender = 1;
     optional FinishNormStructWaittimeStatus status = 2;
     
     enum FinishNormStructWaittimeStatus {
     	SUCCESS = 1;
     	FAIL_NOT_ENOUGH_GEMS = 2;
     	FAIL_OTHER = 3;
     }
}

//------------------------------------------------------------------------------------------

//this message sent to server after a player's homepage is loaded and client checks which structs 
//have been built but not reflected in db yet (so when is_complete=0 but the purchase_time 
//implies that it should be)
//this message is also sent whenever the player is on the screen and the build completes
//i would set last_retrieved manually to when it should have completed, and is_complete=1
											
																						//DONE
//NOT VERY EFFICIENT..extra db call. and for every newly built building, new db call. but w/e for now.																						
message NormStructWaitCompleteRequestProto {
	optional MinimumUserProto sender = 1;
	repeated int32 userStructId = 2;
	
	//if the structure is a generator, the uncollected resources will be lost when upgraded
	//server will compute last retrieved times
	//this is just for history purposes
	optional int64 curTime = 3;
	
	
}

																						//DONE
message NormStructWaitCompleteResponseProto {
     optional MinimumUserProto sender = 1;
     optional NormStructWaitCompleteStatus status = 2;
     repeated FullUserStructureProto userStruct = 3;
     
     enum NormStructWaitCompleteStatus {
     	SUCCESS = 1;
     	FAIL_NOT_DONE_YET = 2;
     	FAIL_OTHER = 3;
     }
}

//------------------------------------------------------------------------------------------
																						//DONE
message RetrieveCurrencyFromNormStructureRequestProto {
	optional MinimumUserProtoWithMaxResources sender = 1;
	repeated StructRetrieval structRetrievals = 2;
	
	message StructRetrieval {
		optional int32 userStructId = 1;
		optional int64 timeOfRetrieval = 2;
		optional int32 amountCollected = 3;
	}
}

																						//DONE
message RetrieveCurrencyFromNormStructureResponseProto {
	optional MinimumUserProtoWithMaxResources sender = 1;
	optional RetrieveCurrencyFromNormStructureStatus status = 2;
	
	enum RetrieveCurrencyFromNormStructureStatus {
		SUCCESS = 1;
		FAIL_OTHER = 2;
	}
}

//------------------------------------------------------------------------------------------
																						//DONE
message ExpansionWaitCompleteRequestProto {
	optional MinimumUserProto sender = 1;
	optional int64 curTime = 2;						//used for checking
	
	//the (x,y) coordinates in relation to the original plot of land
	//sint32 because it's more efficient when google protocol buffers serializes/encodes the values
	optional sint32 xPosition = 3; 
	optional sint32 yPosition = 4;
	
	optional bool speedUp = 5;
	optional int32 gemCostToSpeedup = 6;
}

																						//DONE
message ExpansionWaitCompleteResponseProto {
     optional MinimumUserProto sender = 1;
     optional ExpansionWaitCompleteStatus status = 2;
     optional UserCityExpansionDataProto ucedp = 3;
     
     enum ExpansionWaitCompleteStatus {
     	SUCCESS = 1;
     	FAIL_WAS_NOT_EXPANDING = 2;
     	FAIL_NOT_DONE_YET = 3;
     	FAIL_INSUFFICIENT_GEMS = 4;
     	FAIL_OTHER = 5;
     }
}

//------------------------------------------------------------------------------------------
message SpawnObstacleRequestProto {
	optional MinimumUserProto sender = 1;
	repeated MinimumObstacleProto prospectiveObstacles = 2;
	optional int64 curTime = 3;
}
message SpawnObstacleResponseProto {
	optional MinimumUserProto sender = 1;
	repeated UserObstacleProto spawnedObstacles = 2;
	
	optional SpawnObstacleStatus status = 3;
	enum SpawnObstacleStatus {
		SUCCESS = 1;
		FAIL_OTHER = 2;
	}
}


message BeginObstacleRemovalRequestProto {
	optional MinimumUserProto sender = 1;
	optional int64 curTime = 2;
	
	//if user needs, say, five more cash, then user can spend gems to replace
	//said five cash. (positive number, server will convert it to negative)
	optional int32 gemsSpent = 3;
	
	//positive means refund, negative means charge user (will always be negative)
	optional sint32 resourceChange = 4; 
	optional ResourceType resourceType = 5 [default = CASH]; 
	
	optional int32 userObstacleId = 6;
}

message BeginObstacleRemovalResponseProto {
	optional MinimumUserProto sender = 1;
	optional BeginObstacleRemovalStatus status = 2;
	
	enum BeginObstacleRemovalStatus {
		SUCCESS = 1;
		FAIL_INSUFFICIENT_GEMS = 2;
		FAIL_INSUFFICIENT_RESOURCE = 3;
		FAIL_OTHER = 4;
	}
	
}


message ObstacleRemovalCompleteRequestProto {
	optional MinimumUserProto sender = 1;
	optional int64 curTime = 2;
	
	optional bool speedUp = 3;
	//if user needs, say, five more cash, then user can spend gems to replace
	//said five cash. (positive number, server will convert it to negative)
	optional int32 gemsSpent = 4;
	
	optional int32 userObstacleId = 5;
	
	//if user is at max obstacles and hasn't logged into the game in a while, then
	//when he clears one, the last spawned time should be when he cleared this obstacle
	optional bool atMaxObstacles = 6;
}

message ObstacleRemovalCompleteResponseProto {
	optional MinimumUserProto sender = 1;
	optional ObstacleRemovalCompleteStatus status = 2;
	
	enum ObstacleRemovalCompleteStatus {
		SUCCESS = 1;
		FAIL_INSUFFICIENT_GEMS = 2;
		FAIL_OTHER = 3;
	}
}
