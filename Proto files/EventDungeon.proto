//ALL REQUEST PROTOS SHOULD INCLUDE A MinimumUserProto AS optional that represents which client sent it/triggered it 
//DO NO START PROPERTY METHODS WITH THE WORDS NEW OR COPY

import "MonsterStuff.proto";
import "SharedEnumConfig.proto";
import "Task.proto";
import "User.proto";

package com.lvl6.proto;

option java_outer_classname = "EventDungeonProto";

message BeginDungeonRequestProto {
	optional MinimumUserProto sender = 1;
	optional int64 clientTime = 2;
	optional int32 taskId = 3; 
	
	//used for determining if boss spawned (NOT USED ATM)
	//not really needed. server can calculate it 
	optional bool userBeatAllCityTasks = 4;
	
	//used for PersistentEvent stuff
	optional bool isEvent = 5;
	optional int32 persistentEventId = 6;
	
	//if the user is going to speed up the persistent event cool down timer
	//(positive number, server will convert it to negative)
	optional int32 gemsSpent = 7;
	
	//active quests a user has, this is to allow monsters to drop something
	//other than a piece of themselves (quest_monster_item)  
	repeated int32 questIds = 8;

	//used for element tutorial, client sets what enemy monster element should appear
	//and only that one guy should appear (quest tasks should have only one stage in db)	
	optional Element elem = 9 [default = NO_ELEMENT];
	
	// if not set, then go select monsters at random
	optional bool forceEnemyElem = 10;
}

message BeginDungeonResponseProto {
	optional MinimumUserProto sender = 1;
	repeated TaskStageProto tsp = 2;
	optional int64 userTaskId = 3;
	optional int32 taskId = 4;
	optional BeginDungeonStatus status = 5;
	
	enum BeginDungeonStatus {
		SUCCESS = 1;
		FAIL_OTHER = 2;
	}
}

//------------------------------------------------------------------------------------------

message EndDungeonRequestProto {
	optional MinimumUserProtoWithMaxResources sender = 1;
	optional int64 userTaskId = 2;
	optional bool userWon = 3; 
	optional int64 clientTime = 4;
	
	//(for efficiency reasons: limiting db interaction) 
	//this is to record into the task_for_user_completed table ONLY when
	//user FIRST BEATS a task. 
	optional bool firstTimeUserWonTask = 5;
	
	//used for determining if boss spawns
	optional bool userBeatAllCityTasks = 6;
}

message EndDungeonResponseProto {
	optional MinimumUserProtoWithMaxResources sender = 1;
	optional EndDungeonStatus status = 2;
	//repeated FullUserMonsterProto newOrUpdated = 3; //BAD!!! DON'T START NAMES WITH NEW OR COPY
	repeated FullUserMonsterProto updatedOrNew = 3;
	optional int32 taskId = 4;
	optional bool userWon = 5;
	
	enum EndDungeonStatus {
		SUCCESS = 1;
		FAIL_OTHER = 2;
	}
}

//------------------------------------------------------------------------------------------

message ReviveInDungeonRequestProto {
	optional MinimumUserProto sender = 1;
	optional int64 userTaskId = 2;
	optional int64 clientTime = 3; //tracking purposes 
	repeated UserMonsterCurrentHealthProto reviveMe = 4;
	
	//can only spend gems to revive, so this must be set
	//(positive number, server will convert it to negative)
	optional int32 gemsSpent = 5;
	
}

message ReviveInDungeonResponseProto {
	optional MinimumUserProto sender = 1;
	optional ReviveInDungeonStatus status = 2;
	
	enum ReviveInDungeonStatus {
		SUCCESS = 1;
		FAIL_INSUFFICIENT_FUNDS = 2;
		FAIL_OTHER = 3;
	}
}

//------------------------------------------------------------------------------------------
/* merged into BeginDungeon event
//user can only spend gems to end the cool down timer
message EndPersistentEventCoolDownTimerRequestProto {
	optional MinimumUserProto sender = 1;
	
	//if the user is going to speed up the evolution process
	//(positive number, server will convert it to negative)
	optional int32 gemsSpent = 2; 
	
	optional int32 eventPersistentId = 3;
}

message EndPersistentEventCoolDownTimerResponseProto {
	optional MinimumUserProto sender = 1;
	optional EndPersistentEventCoolDownTimerStatus status = 2;
	
	enum EndPersistentEventCoolDownTimerStatus {
		SUCCESS = 1;
		FAIL_INSUFFICIENT_FUNDS = 2;
		FAIL_OTHER = 3;
	}
}
*/