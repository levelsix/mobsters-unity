
import "MonsterStuff.proto";
import "User.proto";

package com.lvl6.proto;

option java_outer_classname = "EventMonsterProto";
//DO NOT USE ID AS THE NAME OF A PROPERTY IN ANY PROTO

message SubmitMonsterEnhancementRequestProto {
	optional MinimumUserProto sender = 1;
	optional int64 enhancingUserMonsterId = 2;
	repeated int64 feederUserMonsterIds = 3;
	optional int64 clientTime = 4;
}

message SubmitMonsterEnhancementResponseProto {
	optional MinimumUserProto sender = 1;
	optional EnhanceMonsterStatus status = 2;
	

	enum EnhanceMonsterStatus {
		SUCCESS = 1;
		OTHER_FAIL = 2;
		CLIENT_TOO_APART_FROM_SERVER_TIME = 3;
		MAIN_OR_FEEDER_OR_EQUIPS_NONEXISTENT = 4;
		TRYING_TO_SURPASS_MAX_LEVEL = 5;
		NOT_ENOUGH_SILVER = 6;
	}
}

//------------------------------------------------------------------------------------------

//mainly used during battle
message UpdateMonsterHealthRequestProto {
	optional MinimumUserProto sender = 1;
	repeated FullUserMonsterProto fumps = 2; //contains new durabilities 
	optional int64 clientTime = 3; //history, tracking purposes
}

message UpdateMonsterHealthResponseProto {
	optional MinimumUserProto sender = 1;
	repeated FullUserMonsterProto fumps = 2;
	optional UpdateMonsterHealthStatus status = 3;
	
	enum UpdateMonsterHealthStatus {
		SUCCESS = 1;
		FAIL_INSUFFICIENT_FUNDS = 2;
		FAIL_OTHER = 3;
	}
}

//------------------------------------------------------------------------------------------

message HealMonsterRequestProto {
	optional MinimumUserProto sender = 1;
	
	//what user deleted from the queue, the ones the server already knows about
	repeated UserMonsterHealingProto umhDelete = 2; 
	
	//the ones the server already knows about
	//only set if the queue time or start time changes
	repeated UserMonsterHealingProto umhUpdate = 3;
	
	//the ones the server doesn't know about
	repeated UserMonsterHealingProto umhNew = 4;
	
	//take away all cash/silver then take away gems
	optional int32 gemCost = 5;
}

message HealMonsterResponseProto {
	optional MinimumUserProto sender = 1;
	optional HealMonsterStatus status = 2;
	
	//these are the monsters in the table 
	repeated UserMonsterHealingProto umhp = 3;
	
	enum HealMonsterStatus {
		SUCCESS = 1;
		FAIL_INSUFFICIENT_FUNDS = 2;
		FAIL_ALL_MONSTERS_ALREADY_HEALING = 3;
		FAIL_ALL_MONSTERS_NONEXISTENT = 4;
		FAIL_OTHER = 5;
	}
}

//------------------------------------------------------------------------------------------

message HealMonsterWaitTimeCompleteRequestProto {
	optional MinimumUserProto sender = 1;
	//speeds up all or some monsters finished healing by waiting 
	optional bool isSpeedup = 2; 
	//will be set if isSpeedup is true
	optional int32 gemsForSpeedup = 3;
	repeated int64 userMonsterIds = 4;
}

message HealMonsterWaitTimeCompleteResponseProto {
	optional MinimumUserProto sender = 1;
	optional HealMonsterWaitTimeCompleteStatus status = 2;
	
	enum HealMonsterWaitTimeCompleteStatus {
		SUCCESS = 1;
		FAIL_HEALING_NOT_COMPLETE = 2;
		FAIL_INSUFFICIENT_FUNDS = 3;
		FAIL_OTHER = 4;
	}
}

//------------------------------------------------------------------------------------------

message AddMonsterToBattleTeamRequestProto {
	optional MinimumUserProto sender = 1;
	optional int32 teamSlotNum = 2;
	optional int64 userMonsterId = 3;
}

message AddMonsterToBattleTeamResponseProto {
	optional MinimumUserProto sender = 1;
	optional AddMonsterToBattleTeamStatus status = 2;
	
	enum AddMonsterToBattleTeamStatus {
		SUCCESS = 1;
		FAIL_OTHER = 2;
	}
}

//------------------------------------------------------------------------------------------

message RemoveMonsterFromBattleTeamRequestProto {
	optional MinimumUserProto sender = 1;
	optional int64 userMonsterId = 3;
}

message RemoveMonsterFromBattleTeamResponseProto {
	optional MinimumUserProto sender = 1;
	optional AddMonsterToBattleTeamStatus status = 2;
	
	enum AddMonsterToBattleTeamStatus {
		SUCCESS = 1;
		FAIL_OTHER = 2;
	}
}

//------------------------------------------------------------------------------------------

message BuyMonsterInventorySlotRequestProto {
	optional MinimumUserProto sender = 1;
	optional int32 numPurchases = 2;
}	

message BuyMonsterInventorySlotResponseProto {
	optional MinimumUserProto sender = 1;
	optional BuyMonsterInventorySlotStatus status = 2;
	
	 enum BuyMonsterInventorySlotStatus {
		SUCCESS = 1;
		FAIL_INSUFFICIENT_FUNDS = 2;
		FAIL_OTHER = 3;
	}
}

//------------------------------------------------------------------------------------------

