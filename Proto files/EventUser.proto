
import "MonsterStuff.proto";
import "Structure.proto";
import "User.proto";

package com.lvl6.proto;

option java_outer_classname = "EventUserProto";
//DO NOT USE ID AS THE NAME OF A PROPERTY IN ANY PROTO


//CALL STARTUP AFTER THIS

//if devicetoken doesnt work, itll still return success
//client can check user's diamonds to see if it went through
message UserCreateRequestProto {
     optional string udid = 1;
     optional string name = 2;
     optional string referrerCode = 3;
     optional string deviceToken = 4;
     optional int64 timeOfStructPurchase = 5;
     optional int64 timeOfStructBuild = 6;
     optional CoordinateProto structCoords = 7;
     optional bool usedDiamondsToBuilt = 8;
}

message UserCreateResponseProto {
	optional FullUserProto sender = 1;
	optional UserCreateStatus status = 2;
	
    enum UserCreateStatus {
		SUCCESS = 1;
		INVALID_NAME = 2;
		USER_WITH_UDID_ALREADY_EXISTS = 3;
     	INVALID_REFER_CODE = 4;
		OTHER_FAIL = 5;
	}  
}

//------------------------------------------------------------------------------------------

//client calls this whenever exp surpasses the next one
//server checks if user's exp is over the next, if so, increments user's level
																						//DONE

message LevelUpRequestProto {
	optional MinimumUserProto sender = 1;
}
																						//DONE
message LevelUpResponseProto {
     optional MinimumUserProto sender = 1;
     optional LevelUpStatus status = 2;
     repeated FullStructureProto newlyAvailableStructs = 3;					//only new ones

	enum LevelUpStatus {
     	SUCCESS = 1;
     	NOT_ENOUGH_EXP_TO_NEXT_LEVEL = 2;
     	ALREADY_AT_MAX_LEVEL = 3;
     	OTHER_FAIL = 4;
     }
}

//------------------------------------------------------------------------------------------

message RetrieveUsersForUserIdsRequestProto {
    optional MinimumUserProto sender = 1;
	repeated int32 requestedUserIds = 2;
	optional bool includeCurMonsterTeam = 3;
}

																						//DONE
message RetrieveUsersForUserIdsResponseProto {
    optional MinimumUserProto sender = 1;
	repeated FullUserProto requestedUsers = 2;
	repeated UserCurrentMonsterTeamProto curTeam = 3;
}

//------------------------------------------------------------------------------------------

message LogoutRequestProto {
	optional MinimumUserProto sender = 1;
}

//------------------------------------------------------------------------------------------
	
message UpdateClientUserResponseProto {
     optional FullUserProto sender = 1;
     optional int64 timeOfUserUpdate = 2;                               //new Date().getTime(); milliseconds since 1/1/70
}

//------------------------------------------------------------------------------------------
	